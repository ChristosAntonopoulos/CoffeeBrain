trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Build variables
  buildConfiguration: 'Release'
  nodeVersion: '18.x'
  
  # Docker variables
  dockerfilePath: 'Dockerfile'
  imageName: 'coffee-brain'
  imageTag: '$(Build.BuildId)'
  
  # Kubernetes variables
  k8sNamespace: 'coffee-brain'
  k8sConfigPath: 'k8s/'
  
  # Deployment method - change this to your preferred method
  deployMethod: 'appservice'  # Options: 'kubernetes', 'ssh', 'appservice'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build React App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        cd coffee-brain
        npm install
      displayName: 'Install Dependencies'
    
    - script: |
        cd coffee-brain
        npm run build
      displayName: 'Build React App'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'coffee-brain/build'
        artifactName: 'drop'
      displayName: 'Publish Build Artifacts'

- stage: Docker
  displayName: 'Build Docker Image'
  dependsOn: Build
  condition: eq(variables['deployMethod'], 'kubernetes')
  jobs:
  - job: DockerBuild
    displayName: 'Build and Push Docker Image'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'your-acr-connection' # TODO: Replace with your ACR connection
        repository: $(imageName)
        command: 'buildAndPush'
        Dockerfile: 'coffee-brain/$(dockerfilePath)'
        tags: |
          $(imageTag)
          latest
      displayName: 'Build and Push Docker Image'

- stage: Deploy
  displayName: 'Deploy to Kubernetes'
  dependsOn: Docker
  condition: eq(variables['deployMethod'], 'kubernetes')
  jobs:
  - job: DeployToK8s
    displayName: 'Deploy to Kubernetes'
    pool:
      name: 'default'  # Use your default agent
    steps:
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'your-k8s-connection' # TODO: Replace with your K8s connection
        namespace: $(k8sNamespace)
        manifests: |
          $(Pipeline.Workspace)/coffee-brain/k8s/deployment.yaml
          $(Pipeline.Workspace)/coffee-brain/k8s/service.yaml
          $(Pipeline.Workspace)/coffee-brain/k8s/ingress.yaml
        containers: |
          $(imageName):$(imageTag)
      displayName: 'Deploy to Kubernetes'

# Alternative: Deploy via SSH to Ubuntu server
- stage: DeploySSH
  displayName: 'Deploy via SSH (Alternative)'
  dependsOn: Build
  condition: eq(variables['deployMethod'], 'ssh')
  jobs:
  - job: DeployViaSSH
    displayName: 'Deploy to Ubuntu Server via SSH'
    pool:
      name: 'default'  # Use your default agent
    steps:
    - task: SSH@0
      inputs:
        sshEndpoint: 'your-ssh-connection' # TODO: Replace with your SSH service connection
        runOptions: 'commands'
        commands: |
          # Pull the latest image
          docker pull your-registry.azurecr.io/$(imageName):$(imageTag)
          
          # Stop and remove existing container
          docker stop coffee-brain || true
          docker rm coffee-brain || true
          
          # Run new container
          docker run -d \
            --name coffee-brain \
            --restart unless-stopped \
            -p 80:80 \
            your-registry.azurecr.io/$(imageName):$(imageTag)
          
          # Clean up old images
          docker image prune -f
      displayName: 'Deploy via SSH'

# Alternative: Deploy to Azure App Service
- stage: DeployAppService
  displayName: 'Deploy to Azure App Service'
  dependsOn: Build
  condition: eq(variables['deployMethod'], 'appservice')
  jobs:
  - job: DeployToAppService
    displayName: 'Deploy to Azure App Service'
    pool:
      name: 'default'  # Use your default agent
    steps:
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'coffee-brain/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Create deployment package'
    
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'your-azure-subscription' # TODO: Replace with your Azure subscription
        appName: 'your-app-service-name' # TODO: Replace with your App Service name
        package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      displayName: 'Deploy to Azure App Service' 